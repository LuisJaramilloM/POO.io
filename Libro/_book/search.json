[
  {
    "objectID": "Unidades/Ejercicio1/ejercicio.html",
    "href": "Unidades/Ejercicio1/ejercicio.html",
    "title": "15  Ejercicio Complementario",
    "section": "",
    "text": "15.0.1 Enunciado: Sistema de Gestión de Biblioteca\nInstrucciones: Diseña y desarrolla un programa en Java que represente un Sistema de Gestión de Biblioteca. El programa debe permitir:\n-registrar libros\n-usuarios\n-gestionar préstamos.\nAplica los conceptos básicos de Programación Orientada a Objetos (POO) que has aprendido en clase. A continuación, se detallan los requerimientos:\n\nModelado de Clases y Objetos:\n\nCrea tres clases principales: Libro, Usuario y Biblioteca.\nRelaciona las clases para que la biblioteca administre los libros y usuarios, y cada usuario pueda tener varios libros prestados.\n\nEstructura del Programa:\n\nEl programa debe comenzar mostrando un menú con las opciones:\n\nRegistrar un libro.\nRegistrar un usuario.\nPrestar un libro.\nDevolver un libro.\nMostrar el listado de libros disponibles y prestados.\n\n\nEncapsulamiento:\n\nLos atributos de las clases deben ser privados y accesibles únicamente a través de métodos getters y setters.\n\nConstructores:\n\nImplementa constructores para inicializar los objetos con datos (PARAMETRIZADO) como título del libro, autor, nombre del usuario, etc.\n\nGestión de Errores (Excepciones):\n\nSi un usuario intenta prestar un libro que no existe o que ya está prestado, el programa debe mostrar un mensaje de error y continuar funcionando.\n\nPersistencia de Datos:\n\nLos libros y usuarios registrados deben guardarse en un archivo de texto, y el programa debe cargar estos datos al iniciar.\n\nColecciones y Arreglos:\n\nUsa una lista (ArrayList) para gestionar los libros y usuarios registrados.\n\n\nPASOS A REALIZAR.\n\n\n15.0.2 RESUMEN\nVamos a realizar un programa para gestionar una biblioteca, donde debe contener un menú ( lo puedo colocar en el main, o crear una clase y llamarla cuando la necesite), el programa deberá permitir crear usuarios, registrar libros, gestionar préstamos de los libros a los usuarios.\nLos datos deberán cargarse al sistema cuando se inice, en caso que algún libro no exista o está prestado deberá presentar una alerta.\nLas clases deben ser privadas, pero con un constructor parametrizado para la creación, no para la modificación.\nExisten varios libros (necesito un array del objeto Libro que lo maneja BIBLIOTECA).\nExisten varios usuarios ( necesito un array del objeto usuario que lo maneja BIBLIOTECA).\nAtributos usuario y Métodos usuario\nID , Nombre, LibroPrestado (para saber cual libro se ha prestado al usuario).\ngetLibrosPrestados(), agregarLibro, devolverLibro\nAdemás el usuario no debe poder modificar información por lo que necesita getter de ID, Nombre. pero no debe modificar\nAtributos Libro (yo debo colocar).\nID, Titulo, Autor, Prestado (V o F).\nLos métodos de libro que puede observar (get) ID, titulo, Autor, Prestado.\nLos que puede modificar (set) setPrestado.\nLa clase que administra es Biblioteca.\nAtributos: Arrays de libro y usuario.\nMétodos: registrarLibro() , registrarUsuario() , prestarLibro() , devolverLibro(), mostrarLibrosDisponibles()\n\n\n15.0.3 DIAGRAMA UML\n\n\n\n\n\n\n\n15.0.4 CODIFICACIÓN\n\n15.0.4.1 Clase Libro\n\n\npublic class Libro {\n    private static int contadorId = 1; // Atributo estático\n    private final int id; // ID único, final para no permitir cambios\n    private String titulo;\n    private String autor;\n    private boolean prestado;\n\n    public Libro(String titulo, String autor) {\n        this.id = contadorId++;\n        this.titulo = titulo;\n        this.autor = autor;\n        this.prestado = false;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getTitulo() {\n        return titulo;\n    }\n\n    public void setTitulo(String titulo) {\n        this.titulo = titulo;\n    }\n\n    public String getAutor() {\n        return autor;\n    }\n\n    public void setAutor(String autor) {\n        this.autor = autor;\n    }\n\n    public boolean isPrestado() {\n        return prestado;\n    }\n\n    public void setPrestado(boolean prestado) {\n        this.prestado = prestado;\n    }\n\n    @Override\n    public String toString() {\n        return \"ID: \" + id + \", Título: \" + titulo + \", Autor: \" + autor + \", Prestado: \" + (prestado ? \"Sí\" : \"No\");\n    }\n}\n\n\n\n\n\n\n\n\n\n\n15.0.4.2 Clase Usuario\n\n\n\n\n\n\n\n\nimport java.util.ArrayList;\n\npublic class Usuario {\n    private static int contadorId = 1; // Atributo estático\n    private final int id; // ID único, final para no permitir cambios\n    private String nombre;\n    private ArrayList&lt;Libro&gt; librosPrestados;\n\n    public Usuario(String nombre) {\n        this.id = contadorId++;\n        this.nombre = nombre;\n        this.librosPrestados = new ArrayList&lt;&gt;();\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n\n    public void agregarLibroPrestado(Libro libro) {\n        librosPrestados.add(libro);\n    }\n\n    public void devolverLibro(Libro libro) {\n        librosPrestados.remove(libro);\n    }\n\n    public ArrayList&lt;Libro&gt; getLibrosPrestados() {\n        return librosPrestados;\n    }\n\n    @Override\n    public String toString() {\n        return \"ID: \" + id + \", Nombre: \" + nombre;\n    }\n}\n\n\n\n\n15.0.4.3 Clase Biblioteca\n\n\n\nimport java.util.ArrayList;\n\npublic class Biblioteca {\n    private ArrayList&lt;Libro&gt; libros;\n    private ArrayList&lt;Usuario&gt; usuarios;\n\n    // Constructor\n    public Biblioteca() {\n        this.libros = new ArrayList&lt;&gt;();\n        this.usuarios = new ArrayList&lt;&gt;();\n    }\n\n    // Método para agregar un nuevo libro\n    public void agregarLibro(String titulo, String autor) {\n        Libro libro = new Libro(titulo, autor);\n        libros.add(libro);\n        System.out.println(\"Libro agregado: \" + libro.getTitulo() + \" con ID: \" + libro.getId());\n    }\n\n    // Método para registrar un usuario\n    public void registrarUsuario(String nombre) {\n        Usuario usuario = new Usuario(nombre);\n        usuarios.add(usuario);\n        System.out.println(\"Usuario registrado: \" + usuario.getNombre() + \" con ID: \" + usuario.getId());\n    }\n\n    // Método para prestar un libro\n    public void prestarLibro(int idUsuario, int idLibro) {\n        Usuario usuario = buscarUsuario(idUsuario);\n        Libro libro = buscarLibro(idLibro);\n        \n        if (usuario != null && libro != null) {\n            if (!libro.isPrestado()) {\n                libro.setPrestado(true);\n                usuario.agregarLibroPrestado(libro);\n                System.out.println(\"El libro '\" + libro.getTitulo() + \"' ha sido prestado a \" + usuario.getNombre());\n            } else {\n                System.out.println(\"El libro ya está prestado.\");\n            }\n        } else {\n            System.out.println(\"Usuario o libro no encontrado.\");\n        }\n    }\n\n    // Método para devolver un libro\n    public void devolverLibro(int idUsuario, int idLibro) {\n        Usuario usuario = buscarUsuario(idUsuario);\n        Libro libro = buscarLibro(idLibro);\n        \n        if (usuario != null && libro != null) {\n            if (libro.isPrestado()) {\n                libro.setPrestado(false);\n                usuario.devolverLibro(libro);\n                System.out.println(\"El libro '\" + libro.getTitulo() + \"' ha sido devuelto por \" + usuario.getNombre());\n            } else {\n                System.out.println(\"El libro no estaba prestado.\");\n            }\n        } else {\n            System.out.println(\"Usuario o libro no encontrado.\");\n        }\n    }\n\n    // Método para mostrar los libros disponibles\n    public void mostrarLibrosDisponibles() {\n        System.out.println(\"\\n--- Lista de libros disponibles ---\");\n        boolean hayLibros = false;\n        for (Libro libro : libros) {\n            if (!libro.isPrestado()) {\n                System.out.println(\"ID: \" + libro.getId() + \" - Título: \" + libro.getTitulo() + \" - Autor: \" + libro.getAutor());\n                hayLibros = true;\n            }\n        }\n        if (!hayLibros) {\n            System.out.println(\" No hay libros disponibles.\");\n        }\n    }\n    \n    // Método para mostrar usuarios disponibles\n    public void mostrarUsuariosDisponibles() {\n        System.out.println(\"\\n--- Lista de usuarios disponibles ---\");\n        if (usuarios.isEmpty()) {\n            System.out.println(\" No hay usuarios registrados.\");\n        } else {\n            for (Usuario usuario : usuarios) {\n                System.out.println(\"ID: \" + usuario.getId() + \" - Nombre: \" + usuario.getNombre());\n            }\n        }\n    }\n    \n    // Método para mostrar los usuarios con libros prestados\n    public void mostrarUsuariosConLibrosPrestados() {\n        System.out.println(\"\\n--- Lista de usuarios con libros prestados ---\");\n        boolean hayUsuariosConLibros = false;\n        \n        for (Usuario usuario : usuarios) {\n            if (!usuario.getLibrosPrestados().isEmpty()) {\n                System.out.println(\" ID: \" + usuario.getId() + \" - Nombre: \" + usuario.getNombre() + \n                                   \" - Libros prestados: \" + usuario.getLibrosPrestados().size());\n                hayUsuariosConLibros = true;\n            }\n        }\n        \n        if (!hayUsuariosConLibros) {\n            System.out.println(\"No hay usuarios con libros prestados.\");\n        }\n    }\n\n    // Método para mostrar los libros prestados a un usuario específico\n    public void mostrarLibrosPrestados(int idUsuario) {\n        Usuario usuario = buscarUsuario(idUsuario);\n        \n        if (usuario != null) {\n            System.out.println(\"\\n--- Libros prestados al usuario \" + usuario.getNombre() + \" ---\");\n            if (!usuario.getLibrosPrestados().isEmpty()) {\n                for (Libro libro : usuario.getLibrosPrestados()) {\n                    System.out.println(\"ID: \" + libro.getId() + \" - Título: \" + libro.getTitulo() + \" - Autor: \" + libro.getAutor());\n                }\n            } else {\n                System.out.println(\" El usuario no tiene libros prestados.\");\n            }\n        } else {\n            System.out.println(\"Usuario no encontrado.\");\n        }\n    }\n\n    // Método para buscar un libro\n    private Libro buscarLibro(int idLibro) {\n        for (Libro libro : libros) {\n            if (libro.getId() == idLibro) {\n                return libro;\n            }\n        }\n        return null;\n    }\n\n    // Método para buscar un usuario\n    private Usuario buscarUsuario(int idUsuario) {\n        for (Usuario usuario : usuarios) {\n            if (usuario.getId() == idUsuario) {\n                return usuario;\n            }\n        }\n        return null;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n15.0.4.4 Clase Main\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Biblioteca biblioteca = new Biblioteca();\n        Scanner scanner = new Scanner(System.in);\n        int opcion = 0;\n\n        do {\n            System.out.println(\"\\n--- Menú de la Biblioteca ---\");\n            System.out.println(\"1. Agregar libro\");\n            System.out.println(\"2. Registrar usuario\");\n            System.out.println(\"3. Prestar libro\");\n            System.out.println(\"4. Devolver libro\");\n            System.out.println(\"5. Mostrar libros disponibles\");\n            System.out.println(\"6. Mostrar usuarios con libros prestados\");\n            System.out.println(\"7. Salir\");\n            System.out.print(\"Ingrese una opción: \");\n\n            try {\n                opcion = scanner.nextInt();\n                scanner.nextLine(); // Limpiar el buffer de entrada\n            } catch (InputMismatchException e) {\n                System.out.println(\"Opción no válida, debe ser un número.\");\n                scanner.nextLine(); // Limpiar el buffer de entrada\n                continue;\n            }\n\n            switch (opcion) {\n                case 1:\n                    System.out.print(\"Ingrese el título del libro: \");\n                    String titulo = scanner.nextLine();\n                    System.out.print(\"Ingrese el autor del libro: \");\n                    String autor = scanner.nextLine();\n                    biblioteca.agregarLibro(titulo, autor);\n                    break;\n\n                case 2:\n                    System.out.print(\"Ingrese el nombre del usuario: \");\n                    String nombre = scanner.nextLine();\n                    biblioteca.registrarUsuario(nombre);\n                    System.out.println(\" Usuario registrado exitosamente.\");\n                    break;\n\n                case 3:\n                    System.out.println(\"\\n--- Lista de usuarios ---\");\n                    biblioteca.mostrarUsuariosDisponibles();\n                    \n                    try {\n                        System.out.print(\"\\nIngrese el ID del usuario que tomará el libro: \");\n                        int idUsuarioPrestar = scanner.nextInt();\n                        scanner.nextLine(); // Limpiar el buffer de entrada\n                        \n                        System.out.println(\"\\n--- Lista de libros disponibles ---\");\n                        biblioteca.mostrarLibrosDisponibles();\n                        \n                        System.out.print(\"\\nIngrese el ID del libro a prestar: \");\n                        int idLibroPrestar = scanner.nextInt();\n                        scanner.nextLine(); // Limpiar el buffer de entrada\n                        \n                        biblioteca.prestarLibro(idUsuarioPrestar, idLibroPrestar);\n                        System.out.println(\"Libro prestado exitosamente.\");\n                    } catch (InputMismatchException e) {\n                        System.out.println(\"Error: El ID debe ser un número.\");\n                        scanner.nextLine(); // Limpiar el buffer de entrada\n                    }\n                    break;\n\n                case 4:\n                    System.out.println(\"\\n--- Lista de usuarios con libros prestados ---\");\n                    biblioteca.mostrarUsuariosConLibrosPrestados();\n                    \n                    try {\n                        System.out.print(\"\\nIngrese el ID del usuario que devolverá el libro: \");\n                        int idUsuarioDevolver = scanner.nextInt();\n                        scanner.nextLine(); // Limpiar el buffer de entrada\n                        \n                        System.out.println(\"\\n--- Lista de libros prestados ---\");\n                        biblioteca.mostrarLibrosPrestados(idUsuarioDevolver);\n                        \n                        System.out.print(\"\\nIngrese el ID del libro a devolver: \");\n                        int idLibroDevolver = scanner.nextInt();\n                        scanner.nextLine(); // Limpiar el buffer de entrada\n                        \n                        biblioteca.devolverLibro(idUsuarioDevolver, idLibroDevolver);\n                        System.out.println(\"Libro devuelto exitosamente.\");\n                    } catch (InputMismatchException e) {\n                        System.out.println(\"Error: El ID debe ser un número.\");\n                        scanner.nextLine(); // Limpiar el buffer de entrada\n                    }\n                    break;\n\n                case 5:\n                    System.out.println(\"\\n--- Lista de libros disponibles ---\");\n                    biblioteca.mostrarLibrosDisponibles();\n                    break;\n                        \n                case 6:\n                    biblioteca.mostrarUsuariosConLibrosPrestados();\n                    break;\n                    \n                case 7:\n                    System.out.println(\"Saliendo...\");\n                    break;\n                    \n                default:\n                    System.out.println(\"Opción no válida.\");\n            }\n        } while (opcion != 7);\n        \n        scanner.close();\n    }\n}\n\n\n\n15.0.5 Conceptos Aplicados\n\nModelamiento de Clases y Objetos: Se modelaron las clases Libro, Usuario y Biblioteca.\nEncapsulamiento: Los atributos están privados y solo se acceden mediante getters y setters.\nConstructores: Los objetos Libro y Usuario se crean con un constructor.\nGetters y Setters: Se accede y modifica la información de los objetos a través de getters y setters.\nRelaciones entre Clases:\n\nBiblioteca tiene una relación de agregación con Usuario y Libro.\nUsuario tiene una relación de composición con la lista de libros prestados.\n\nExcepciones: Aunque no se manejan excepciones explícitas, se pueden añadir para controlar la entrada de datos.\nPersistencia de Datos: Se podría extender la persistencia a un archivo, pero actualmente se gestiona en memoria.\nArreglos y Colecciones: Se utilizan ArrayList para la lista de usuarios y la lista de libros.\nEstructura General de un Programa: La clase Main orquesta la lógica principal de la aplicación.\nLectura y Escritura por Consola: Los mensajes se muestran en la consola para facilitar la interacción con el usuario."
  }
]